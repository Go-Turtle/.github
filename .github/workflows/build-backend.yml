on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string


jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup Go
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.8
          stable: true

      # Install all the dependencies
      - name: Install dependencies
        run: |
          go version
          git config --global url."https://${{ secrets.GIT_ACCESS_TOKEN }}:x-oauth-basic@github.com/go-turtle".insteadOf "https://github.com/go-turtle"
          go get -u golang.org/x/lint/golint
      # Run build of the application
      - name: Run build
        run: go build ./...

      # Run vet & lint on the code
      - name: Run vet & lint
        run: |
          go vet ./...
#          golint ./...

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ build ] # Only run this workflow when "build" workflow succeeds
    #if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }} # Only run this workflow if it is main branch on push event

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.service_name }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build --build-arg GITHUB_ACCESS_TOKEN=${{ secrets.GIT_ACCESS_TOKEN }} --build-arg GITHUB_USERNAME=${{ secrets.GIT_USERNAME }} -f ./build/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker image tag $ECR_REGISTRY/$ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Force new update
      run: |
        aws ecs update-service --cluster dev-ecs --service ${{ inputs.service_name }} --force-new-deployment --region eu-central-1
